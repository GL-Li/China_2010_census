baseenv()
search()
e <- new.env()
e$a <- 1
e$b <- 2
parent.env(e)  # <environment: R_GlobalEnv>
ls(e)  # [1] "a" "b"
ls.str(e)
ls(env)
identical(1, 1)
df <- mtcars
df
str(df)
apply(df, 2, mean)
lappy(df, mean)
lapply(df, mean)
sapply(df, mean)
vapply(df, mean)
?vapply
tapply(df$mpg, df$cyl, mean)
tapply(df$mpg, df$disp, mean)
tapply(df$mpg, df$gear, mean)
replicate(3, letters)
mpg
library(ggplot2)
head(mpg)
ggplot(mpg, aes(weight, hwy)) + geom_point()
ggplot(mpg, aes(wt, hwy)) + geom_point()
ggplot(mpg, aes(displ, hwy)) + geom_point()
ggplot(mpg, aes(displ, hwy, color = year)) + geom_point()
ggplot(mpg, aes(displ, hwy, color = manufacturer)) +
geom_point()
names(mpg)
ggplot(mpg, aes(displ, hwy, color = cyl)) +
geom_point()
ggplot(mpg, aes(displ, hwy, color = as.factor(cyl))) +
geom_point()
ggplot(mpg, aes(displ, hwy, shape = as.factor(cyl))) +
geom_point()
ggplot(mpg, aes(displ, hwy, shape = cyl)) +
geom_point()
as.factor(
ggplot(mpg, aes(displ, hwy, shape = as.factor(cyl))) +
geom_point()
ggplot(mpg, aes(displ, hwy, shape = as.factor(cyl))) +
ggplot(mpg, aes(displ, hwy, color = as.factor(cyl))) +
geom_point()
ggplot(mpg, aes(displ, hwy, shape = as.factor(cyl))) +
geom_point()
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~class)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~cyl)
names(mpg)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~year)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~cty)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~displ)
?facet_wrap
summary(mpg)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~year)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~manufacturer)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~manufacturer, nrow = 2, ncol = 3)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~manufacturer, nrow = 3, ncol = 3)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~manufacturer, nrow = 5, ncol = 3)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~manufacturer, nrow = 5, ncol = 3, scales = "free")
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~manufacturer, nrow = 5, ncol = 3, scales = "free_x")
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth()
?geom_smooth
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(method = "loess")
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(method = "loess", span = 0.1)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(method = "loess", span = 0.5)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(method = "loess", span = 0.2)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(method = "loess", span = 1)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(method = "loess", span = 0.4)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(method = "lm", span = 0.4)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(method = "lm", span = 1)
ggplot(mpg, aes(drv, hwy)) +
geom_point()
ggplot(mpg, aes(drv, hwy)) +
geom_point() +
geom_jitter()
ggplot(mpg, aes(drv, hwy)) +
geom_jitter()
ggplot(mpg, aes(drv, hwy)) +
geom_boxplot()
ggplot(mpg, aes(drv, hwy)) +
geom_violin()
ggplot(mpg, aes(drv, hwy)) +
geom_jitter(aes(color = cyl))
ggplot(mpg, aes(drv, hwy)) +
geom_jitter(aes(color = drv))
ggplot(mpg, aes(drv, hwy)) +
geom_jitter(aes(color = year))
ggplot(mpg, aes(drv, hwy)) +
geom_jitter(aes(color = as.factor(year)))
ggplot(mpg, aes(drv, hwy)) +
geom_jitter(aes(color = as.factor(year)))
set.seed(123)
set.seed(123)
set.seed(123)
ggplot(mpg, aes(drv, hwy)) +
geom_jitter(aes(color = as.factor(year)))
set.seed(123)
ggplot(mpg, aes(drv, hwy)) +
geom_jitter(aes(color = as.factor(year)))
set.seed(123)
ggplot(mpg, aes(drv, hwy)) +
geom_jitter(aes(color = as.factor(year)))
set.seed(123)
ggplot(mpg, aes(drv, hwy)) +
geom_jitter(aes(color = as.factor(year)))
ggplot(mpg, aes(hwy)) +
geom_histogram()
ggplot(mpg, aes(hwy)) +
geom_histogram(binwidth = 1)
ggplot(mpg, aes(hwy)) +
geom_histogram(binwidth = 2)
ggplot(mpg, aes(hwy)) +
geom_histogram(binwidth = 1)
ggplot() +
geom_histogram(mpg, aes(hwy), binwidth = 1)
ggplot(mpg) +
geom_histogram(mpg, aes(hwy), binwidth = 1)
?geom_histogram
ggplot() +
geom_histogram(data = mpg, aes(hwy), binwidth = 1)
ggplot(mpg, aes(hwy, cty)) +
geom_histogram(data = mpg, aes(hwy), binwidth = 1)
ggplot(mpg, aes(hwy, cty)) +
geom_point() +
geom_histogram(data = mpg, aes(hwy), binwidth = 1)
ggplot(mpg, aes(hwy, cty)) +
geom_point()
ggplot() +
geom_histogram(data = mpg, aes(hwy), binwidth = 1)
ggplot() +
geom_histogram(data = mpg, aes(hwy), binwidth = 1) +
geom_histogram(aes(cty))
names(mpg)
ggplot() +
geom_histogram(data = mpg, aes(hwy), binwidth = 1)
ggplot(mpg, aes(displ, color = drv)) +
geom_freqpoly(binwidth = 1)
ggplot(mpg, aes(displ, color = drv)) +
geom_freqpoly(binwidth = 0.5)
ggplot(mpg, aes(displ, color = drv)) +
geom_histogram(binwidth = 0.5)
ggplot(mpg, aes(displ, color = drv)) +
geom_freqpoly(binwidth = 0.5)
ggplot(mpg, aes(manufacturer)) +
geom_bar()
ggplot(df, aes(a, b)) +
geom_bar(stat = "identity")
df <- data.frame(a = letters[1:3], b = c(3, 1, 2))
ggplot(df, aes(a, b)) +
geom_bar(stat = "identity")
?geom_abline
?geom_bar
library(ggplot2)
library(ggmap)
setwd("~/Dropbox/kaggle_datasets/police_shooting")
shooting <- read.csv("database.csv", stringsAsFactors = FALSE)
shooting$city_state <- paste0(shooting$city, ", ", shooting$state)
if (!file.exists("city_coord.csv")) {
city_coord <- data.frame(geocode(unique(shooting$city_state)))  # do not repeat cities
city_coord$city_state <- unique(shooting$city_state)
write.csv(city_coord, file = "city_coord.csv", row.names = FALSE)
}
geocode("anhui, china")
city_coord <- read.csv("city_coord.csv")
rownames(city_coord) <- city_coord$city_state
shooting$lon <- city_coord[shooting$city_state, "lon"]
shooting$lat <- city_coord[shooting$city_state, "lat"]
city_count <- data.frame(table(shooting$city_state))
names(city_count) <- c("city", "count")
city_count$lon <- city_coord_uniq[as.character(city_count$city), "lon"]
city_count$lon <- city_coord[as.character(city_count$city), "lon"]
city_count$lat <- city_coord[as.character(city_count$city), "lat"]
us <- map_data("state")
ggplot() +
geom_map(data = us, map = us, aes(long, lat, map_id = region), color = "grey", fill = "white") +
geom_point(data = city_count, aes(lon, lat, size = count), alpha = 0.4, color = "red") +
scale_size_area() +
xlim(c(-123, -69)) +
ylim(c(24, 50))
city_coord["aaa", "lon"]
https://drive.google.com/open?id=0B-Htd8tWB1YoVnVjdDRIdXB6LUU
aaa <- read.csv("https://drive.google.com/open?id=0B-Htd8tWB1YoVnVjdDRIdXB6LUU")
aaa <- read.csv("https://s3.amazonaws.com/gl-shared-data/city_coord.csv")
aaa <- read.csv("https://s3.amazonaws.com/gl-shared-data/city_coord.csv")
View(aaa)
library(ggplot2)
library(ggmap)
setwd("~/Dropbox/kaggle_datasets/police_shooting")
shooting <- read.csv("database.csv", stringsAsFactors = FALSE)
# add new column for city location
shooting$city_state <- paste0(shooting$city, ", ", shooting$state)
# As Google Map only allows 2500 quesries a day, I shared the downloaded city coordinates
# data online
city_coord <- read.csv("https://s3.amazonaws.com/gl-shared-data/city_coord.csv")
rownames(city_coord) <- city_coord$city_state
shooting$lon <- city_coord[shooting$city_state, "lon"]
shooting$lat <- city_coord[shooting$city_state, "lat"]
# count of each city
city_count <- data.frame(table(shooting$city_state))
names(city_count) <- c("city", "count")
city_count$lon <- city_coord[as.character(city_count$city), "lon"]
city_count$lat <- city_coord[as.character(city_count$city), "lat"]
us <- map_data("state")
ggplot() +
geom_map(data = us, map = us, aes(long, lat, map_id = region), color = "grey", fill = "white") +
geom_point(data = city_count, aes(lon, lat, size = count), alpha = 0.4, color = "red") +
scale_size_area() +
xlim(c(-123, -69)) +
ylim(c(24, 50))
# count of each city
city_count <- data.frame(table(shooting$city_state))
names(city_count) <- c("city", "count")
city_count$lon <- city_coord[as.character(city_count$city), "lon"]
city_count$lat <- city_coord[as.character(city_count$city), "lat"]
# map the shooting locations in lower 48 states
us <- map_data("state")
ggplot() +
geom_map(data = us, map = us, aes(long, lat, map_id = region), color = "grey", fill = "white") +
geom_point(data = city_count, aes(lon, lat, size = count), alpha = 0.4, color = "red") +
scale_size_area() +
xlim(c(-123, -69)) +
ylim(c(24, 50)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# count of each city
city_count <- data.frame(table(shooting$city_state))
names(city_count) <- c("city", "count")
city_count$lon <- city_coord[as.character(city_count$city), "lon"]
city_count$lat <- city_coord[as.character(city_count$city), "lat"]
# map the shooting locations in lower 48 states
us <- map_data("state")
ggplot() +
geom_map(data = us, map = us, aes(long, lat, map_id = region), color = "grey", fill = "white") +
geom_point(data = city_count, aes(lon, lat, size = count), alpha = 0.4, color = "red") +
scale_size_area() +
xlim(c(-123, -69)) +
ylim(c(24, 50)) +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
# count of each city
city_count <- data.frame(table(shooting$city_state))
names(city_count) <- c("city", "count")
city_count$lon <- city_coord[as.character(city_count$city), "lon"]
city_count$lat <- city_coord[as.character(city_count$city), "lat"]
# map the shooting locations in lower 48 states
us <- map_data("state")
ggplot() +
geom_map(data = us, map = us, aes(long, lat, map_id = region), color = "grey", fill = "white") +
geom_point(data = city_count, aes(lon, lat, size = count), alpha = 0.4, color = "red") +
scale_size_area() +
xlim(c(-123, -69)) +
ylim(c(24, 50)) +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
?coord_fixed
# count of each city
city_count <- data.frame(table(shooting$city_state))
names(city_count) <- c("city", "count")
city_count$lon <- city_coord[as.character(city_count$city), "lon"]
city_count$lat <- city_coord[as.character(city_count$city), "lat"]
# map the shooting locations in lower 48 states
us <- map_data("state")
ggplot() +
geom_map(data = us, map = us, aes(long, lat, map_id = region), color = "grey", fill = "white") +
geom_point(data = city_count, aes(lon, lat, size = count), alpha = 0.4, color = "red") +
scale_size_area() +
# xlim(c(-123, -69)) +
# ylim(c(24, 50)) +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank()) +
coord_fixed(ratio = 0.8, xlim = c(-123, -69), ylim = c(24, 50))
# count of each city
city_count <- data.frame(table(shooting$city_state))
names(city_count) <- c("city", "count")
city_count$lon <- city_coord[as.character(city_count$city), "lon"]
city_count$lat <- city_coord[as.character(city_count$city), "lat"]
# map the shooting locations in lower 48 states
us <- map_data("state")
ggplot() +
geom_map(data = us, map = us, aes(long, lat, map_id = region), color = "grey", fill = "white") +
geom_point(data = city_count, aes(lon, lat, size = count), alpha = 0.4, color = "red") +
scale_size_area() +
# xlim(c(-123, -69)) +
# ylim(c(24, 50)) +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank()) +
coord_fixed(ratio = 1.2, xlim = c(-123, -69), ylim = c(24, 50))
# count of each city
city_count <- data.frame(table(shooting$city_state))
names(city_count) <- c("city", "count")
city_count$lon <- city_coord[as.character(city_count$city), "lon"]
city_count$lat <- city_coord[as.character(city_count$city), "lat"]
# map the shooting locations in lower 48 states
us <- map_data("state")
ggplot() +
geom_map(data = us, map = us, aes(long, lat, map_id = region), color = "grey", fill = "white") +
geom_point(data = city_count, aes(lon, lat, size = count), alpha = 0.4, color = "red") +
scale_size_area() +
# xlim(c(-123, -69)) +
# ylim(c(24, 50)) +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank()) +
coord_fixed(ratio = 1.5, xlim = c(-123, -69), ylim = c(24, 50))
# count of each city
city_count <- data.frame(table(shooting$city_state))
names(city_count) <- c("city", "count")
city_count$lon <- city_coord[as.character(city_count$city), "lon"]
city_count$lat <- city_coord[as.character(city_count$city), "lat"]
# map the shooting locations in lower 48 states
us <- map_data("state")
ggplot() +
geom_map(data = us, map = us, aes(long, lat, map_id = region), color = "grey", fill = "white") +
geom_point(data = city_count, aes(lon, lat, size = count), alpha = 0.4, color = "red") +
scale_size_area() +
# xlim(c(-123, -69)) +
# ylim(c(24, 50)) +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank()) +
coord_fixed(ratio = 1.4, xlim = c(-123, -69), ylim = c(24, 50))
# count of each city
city_count <- data.frame(table(shooting$city_state))
names(city_count) <- c("city", "count")
city_count$lon <- city_coord[as.character(city_count$city), "lon"]
city_count$lat <- city_coord[as.character(city_count$city), "lat"]
# map the shooting locations in lower 48 states
us <- map_data("state")
ggplot() +
geom_map(data = us, map = us, aes(long, lat, map_id = region), color = "grey", fill = "white") +
geom_point(data = city_count, aes(lon, lat, size = count), alpha = 0.4, color = "red") +
scale_size_area() +
xlim(c(-123, -69)) +
ylim(c(24, 50)) +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank()) +
coord_map()
# coord_fixed(ratio = 1.4, xlim = c(-123, -69), ylim = c(24, 50))
# count of each city
city_count <- data.frame(table(shooting$city_state))
names(city_count) <- c("city", "count")
city_count$lon <- city_coord[as.character(city_count$city), "lon"]
city_count$lat <- city_coord[as.character(city_count$city), "lat"]
# map the shooting locations in lower 48 states
us <- map_data("state")
ggplot() +
geom_map(data = us, map = us, aes(long, lat, map_id = region), color = "grey", fill = "white") +
geom_point(data = city_count, aes(lon, lat, size = count), alpha = 0.4, color = "red") +
scale_size_area() +
xlim(c(-123, -69)) +
ylim(c(24, 50)) +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank()) +
coord_map()
# count of each city
city_count <- data.frame(table(shooting$city_state))
names(city_count) <- c("city", "count")
city_count$lon <- city_coord[as.character(city_count$city), "lon"]
city_count$lat <- city_coord[as.character(city_count$city), "lat"]
# map the shooting locations in lower 48 states
us <- map_data("state")
ggplot() +
geom_map(data = us, map = us, aes(long, lat, map_id = region), color = "grey", fill = "white") +
geom_point(data = city_count, aes(lon, lat, size = count), alpha = 0.4, color = "red") +
scale_size_area() +
ggtitle("Location and count of fatal police shooting") +
xlim(c(-123, -69)) +
ylim(c(24, 50)) +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank()) +
coord_map()
library(ggplot2)
library(ggmap)
shooting <- read.csv("database.csv", stringsAsFactors = FALSE)
# add new column for city location
shooting$city_state <- paste0(shooting$city, ", ", shooting$state)
# Download city coordinates on your local computer as Google Map only allows 2500 quesries a day
# downloading city coordinates takes a long time. save the download to local computer as a csv file
# if (!file.exists("city_coord.csv")) {
#     city_coord <- data.frame(geocode(unique(shooting$city_state)))  # do not repeat cities
#     city_coord$city_state <- unique(shooting$city_state)
#     write.csv(city_coord, file = "city_coord.csv", row.names = FALSE)
# }
# city_coord <- read.csv("city_coord.csv")
# rownames(city_coord) <- city_coord$city_state
# shooting$lon <- city_coord[shooting$city_state, "lon"]
# shooting$lat <- city_coord[shooting$city_state, "lat"]
# Due to the restriction of Google Map, I shared the downloaded city coordinates
# data online. skip it on your local computer and run above commented code instead
city_coord <- read.csv("https://s3.amazonaws.com/gl-shared-data/city_coord.csv")
rownames(city_coord) <- city_coord$city_state
shooting$lon <- city_coord[shooting$city_state, "lon"]
shooting$lat <- city_coord[shooting$city_state, "lat"]
# count of each city
city_count <- data.frame(table(shooting$city_state))
names(city_count) <- c("city", "count")
city_count$lon <- city_coord[as.character(city_count$city), "lon"]
city_count$lat <- city_coord[as.character(city_count$city), "lat"]
# map the shooting locations in lower 48 states
us <- map_data("state")
ggplot() +
geom_map(data = us, map = us, aes(long, lat, map_id = region), color = "grey", fill = "white") +
geom_point(data = city_count, aes(lon, lat, size = count), alpha = 0.4, color = "red") +
scale_size_area() +
xlim(c(-123, -69)) +
ylim(c(24, 50)) +
theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank()) +
coord_map()
install.packages("bookdown")
library(data.table)
aa <- data.table(x = letters[1:3],
y = 1:3)
bb <- data.table(x = c("a", "a", "c"),
z = 7:9)
aa[bb, on = "x"]
bb[aa, on = "x"]
source('~/Dropbox/my_R_projects/China_2010_cencus/blog_plot/china_province_population_2000_2010.R')
df = df_popul
df$English_name <- convert_province_names(df[,1], prov_name_format, "English_name")
prov_name_format = "short_name"
df$English_name <- convert_province_names(df[,1], prov_name_format, "English_name")
View(df)
df <- data.table(df)
names(df) <- c("original_name", "value", "English_name")
View(df)
map <- fread("~/Dropbox/data_collection/China_province_boundaries.csv")
map <- merge(map, df[, 2:3], by = "English_name", all.x = TRUE)
View(map)
View(df)
names(df)
names(map)
str(df)
str(map)
df[,2:3]
df[, 2:3]
df[, .(2:3)]
names(df)
map <- df[, .(value, English_name)][map, on = "English_name"]
View(map)
map <- na.omit(map)
source('~/Dropbox/my_R_projects/China_2010_cencus/blog_plot/china_province_population_2000_2010.R')
source('~/Dropbox/my_R_projects/China_2010_cencus/blog_plot/china_province_population_2000_2010.R')
dt <- data.table(iris)
unique(dt$Species)
aa <- data.table(Species = c("setosa", "setosa", "versicolor"),
value = 1:3)
dt[aa, on = Species]
dt[aa, on = "Species"]
aa[dt, on = "Species"]
dt <- data.table(iris[c(1, 51, 101),])
aa <- data.table(Species = c("setosa", "setosa", "versicolor"),
value = 1:3)
dt[aa, on = "Species"]
aa[dt, on = "Species"]
dt[aa, on = "Species"]
aa[dt, on = "Species"]
